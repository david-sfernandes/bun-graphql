type User {
  id: ID!
  email: String!
  name: String!
  role: String!
  password: String!
  createdAt: String!
  updatedAt: String!
  clients: [Client!]
}

type Invite {
  id: ID!
  email: String!
  token: String!
  role: String!
  clients: [Client!]
  createdAt: String!
  updatedAt: String!
  expiresAt: String!
}

type Device {
  id: Int!
  name: String!
  nickname: String
  mac: String!
  brand: String!
  os: String!
  processor: String!
  username: String!
  serial: String!
  model: String!
  type: String!
  isActive: Boolean!
  updatedAt: String!
  syncedAt: String!
  clientId: Int!
}

type Client {
  id: Int!
  name: String!
  companyName: String!
  category: String
  cnpj: String!
  isActive: Boolean
  contractDeviceQty: Int
  devices: [Device!]
}

type SecurityEvent {
  id: Int!
  deviceName: String!
  endpoint: String!
  username: String!
  occurrences: Int!
  lastOccurrence: String!
  module: String!
  type: String!
  companyName: String!
  deviceId: Int
}

type AuthPayload {
  token: String!
  name: String!
  role: String!
}

type Query {
  user(email: String!): User
  users: [User!]
  clients: [Client!]
  client(id: Int!): Client
  devices(clientId: Int!): [Device!]
  device(id: Int!): Device
  login(email: String!, password: String!): AuthPayload
  securityEvents(clientId: Int!): [SecurityEvent!]
}

type Mutation {
  createUser(email: String, name: String!, password: String): User
  createInvite(email: String!, role: String!, clients: [Int!]): Invite
  createUserWithInvite(email: String!, name: String!, password: String!, token: String!): User
  updatePassword(email: String!, password: String!, newPassword: String!): User
}

schema {
  query: Query
  mutation: Mutation
}
